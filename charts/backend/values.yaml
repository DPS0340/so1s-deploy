environment: "develop"

namespaceOverride: ""

replicaCount: 1

image:
  repository: nginx
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

imagePullPolicy: Always

serviceAccount:
  create: true
  annotations: {}
  name: ""

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080
  targetPort: 8080

resources:
  limits:
    memory: "2000Mi"
    cpu: "2000m"
  requests:
    memory: "1500Mi"
    cpu: "1500m"

resourceQuota:
  cpu: "2000m"
  memory: "2000Mi"

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations:
  - key: kind
    operator: "Equal"
    value: "api"
    effect: "NoSchedule"

affinity: {}


## kube-prometheus-stack (Prometheus & Grafana) 설정 파일
##

prometheus:
  enabled: true
  
kube-prometheus-stack:
  prometheus:
    prometheusSpec:
      routePrefix: /prom
      storageSpec:
        volumeClaimTemplate:
          spec:
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 5Gi
            selector:
              matchLabels:
                app: my-example-prometheus
  ingress:
    ingressClassName: nginx
    enabled: true
    paths:
      - /prom
  grafana:
    adminPassword: password1234
    ingress:
      ingressClassName: nginx
      enabled: true
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /$2
      path: /dashboard(/|$)(.*)
    grafana.ini:
      server:
        domain: so1s.io
        root_url: http://so1s.io/dashboard/
        serve_from_sub_path: true