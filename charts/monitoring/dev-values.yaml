# fullnameOverride: "sungbin-dev"

## Prometheus Configuration
prometheus:
  prometheusSpec:
    tolerations:
    - key: kind
      operator: "Equal"
      value: "api"
      effect: "NoSchedule"
    routePrefix: /graph
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 5Gi
  service:
    type: LoadBalancer
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-type: "external"
      service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "instance"
      service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
  ingress:
    # ingressClassName: alb
    enabled: true
    annotations: 
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/target-type: instance 
      alb.ingress.kubernetes.io/scheme: internet-facing 
      external-dns.alpha.kubernetes.io/hostname: prom.so1s.io
    hosts:
      - prom.so1s.io
    paths:
      - /
    pathType: Prefix
  thanosIngress:
   enabled: false

alertmanager:
  alertmanagerSpec: 
    tolerations:
      - key: kind
        operator: "Equal"
        value: "api"
        effect: "NoSchedule"
  # service:
  #   type: LoadBalancer
  #   annotations:
  #     service.beta.kubernetes.io/aws-load-balancer-type: "external"
  #     service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "instance"
  #     service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"      
  ingress: # 추후에 설정 예정
    # ingressClassName: alb
    enabled: false
    # annotations: 
    #   kubernetes.io/ingress.class: alb
    #   alb.ingress.kubernetes.io/target-type: instance 
    #   alb.ingress.kubernetes.io/scheme: internet-facing 
    #   external-dns.alpha.kubernetes.io/hostname: dashboard.so1s.io

thanosRuler:
  thanosRulerSpec:
    tolerations:
      - key: kind
        operator: "Equal"
        value: "api"
        effect: "NoSchedule"
prometheusOperator:
  tolerations:
    - key: kind
      operator: "Equal"
      value: "api"
      effect: "NoSchedule"
  admissionWebhooks:
    patch: 
      tolerations:
        - key: kind
          operator: "Equal"
          value: "api"
          effect: "NoSchedule"


## Grafana Configuration
grafana:
  tolerations:
    - key: kind
      operator: "Equal"
      value: "api"
      effect: "NoSchedule"
  adminPassword: password1234
  service:
    type: LoadBalancer
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-type: "external"
      service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "instance"
      service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
  ingress:
    # ingressClassName: alb
    enabled: true
    annotations: 
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/target-type: instance 
      alb.ingress.kubernetes.io/scheme: internet-facing 
      external-dns.alpha.kubernetes.io/hostname: dashboard.so1s.io
      # nginx.ingress.kubernetes.io/rewrite-target: /$2
    hosts:
      - dashboard.so1s.io
    path: /
  grafana.ini:
    server:
      domain: so1s.io
      root_url: http://dashboard.so1s.io/
      serve_from_sub_path: true
  
  additionalDataSources:
    - name: CloudWatch
      type: cloudwatch
      uid: so1s_cloudwatch
      jsonData:
        authType: default
        defaultRegion: ap-northeast-2
        assumeRoleArn: arn:aws:iam::089143290485:role/grafana-cloudwatch

## prometheus-node-exporter Configuration
prometheus-node-exporter:
  tolerations:
    - key: kind
      operator: "Equal"
      value: "api"
      effect: "NoSchedule"

## kube-state-metrics Configuration
kube-state-metrics:
  tolerations:
    - key: kind
      operator: "Equal"
      value: "api"
      effect: "NoSchedule"