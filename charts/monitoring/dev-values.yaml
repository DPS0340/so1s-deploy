preInstall:
  tolerations:
    - key: kind
      operator: "Equal"
      value: "library"
      effect: "NoSchedule"

## GPU Operator Configuration
gpu-operator:
  enabled: true

  # Use Custom Pod Scheduling that suited GPU Node
  binpackScheduling:
    enabled: true

  daemonsets:
    tolerations:
    - key: kind
      value: infernece
      operator: Equal
      effect: NoSchedule
  
  operator:
    defaultRuntime: containerd
    cleanupCRD: true
    upgradeCRD: true
    initContainer:
      image: cuda
      repository: nvcr.io/nvidia
      version: 11.7.1-base-ubi8
      imagePullPolicy: IfNotPresent
    tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Equal"
        value: ""
        effect: "NoSchedule"
      - key: "kind"
        operator: "Equal"
        value: "inference"
        effect: "NoSchedule"
    affinity:
      nodeAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
                - key: "node-role.kubernetes.io/master"
                  operator: In
                  values: [""]
    # Development Mode defaults(encoder=consoleEncoder,logLevel=Debug,stackTraceLevel=Warn)
    # Production Mode defaults(encoder=jsonEncoder,logLevel=Info,stackTraceLevel=Error)
    develMode: false
    resources:
      limits:
        cpu: 500m
        memory: 350Mi
      requests:
        cpu: 200m
        memory: 100Mi

  # so1s's infra environment have been installed nvidia driver by accerlated eks gpu node ami
  # but if you don't install nvidia driver in your node then you must install that :).
  driver:
    enabled: false
    # repository: nvcr.io/nvidia
    # image: driver
    # version: "515.65.01"
    # imagePullPolicy: IfNotPresent
    # imagePullSecrets: []
    # manager:
    #   image: k8s-driver-manager
    #   repository: nvcr.io/nvidia/cloud-native
    #   version: v0.4.2
    #   imagePullPolicy: IfNotPresent

  toolkit:
    enabled: true
    repository: nvcr.io/nvidia/k8s
    image: container-toolkit
    version: v1.11.0-ubuntu20.04
    imagePullPolicy: IfNotPresent

  devicePlugin:
    enabled: true
    repository: nvcr.io/nvidia
    image: k8s-device-plugin
    version: v0.13.0-rc.1 # v0.12.3-ubi8 
    imagePullPolicy: IfNotPresent
    imagePullSecrets: []

  dcgm:
    # disabled by default to use embedded nv-hostengine by exporter
    enabled: false

  dcgmExporter:
    enabled: true
    repository: nvcr.io/nvidia/k8s
    image: dcgm-exporter
    version: 3.0.4-3.0.0-ubuntu20.04
    imagePullPolicy: IfNotPresent
    env:
      - name: DCGM_EXPORTER_LISTEN
        value: ":9400"
      - name: DCGM_EXPORTER_KUBERNETES
        value: "true"
      - name: DCGM_EXPORTER_COLLECTORS
        value: "/etc/dcgm-exporter/dcp-metrics-included.csv"
    resources: {}
    serviceMonitor:
      enabled: true
      interval: 15s
      honorLabels: false
      additionalLabels: {}

  gfd:
    enabled: true
    repository: nvcr.io/nvidia
    image: gpu-feature-discovery
    version: v0.6.2-ubi8
    imagePullPolicy: IfNotPresent
    imagePullSecrets: []
    env:
      - name: GFD_SLEEP_INTERVAL
        value: 60s
      - name: GFD_FAIL_ON_INIT_ERROR
        value: "true"
    resources: {}

  migManager:
    enabled: false

  nodeStatusExporter:
    enabled: false

  # Experimental and only deploys nvidia-fs driver on Ubuntu
  gds:
    enabled: false

  vgpuManager:
    enabled: false

  vgpuDeviceManager:
    enabled: true
    repository: nvcr.io/nvidia/cloud-native
    image: vgpu-device-manager
    version: "v0.2.0"
    imagePullPolicy: IfNotPresent
    imagePullSecrets: []
    env: []
    config:
      name: ""
      default: "default"

  vfioManager:
    enabled: true
    repository: nvcr.io/nvidia
    image: cuda
    version: 11.7.1-base-ubi8
    imagePullPolicy: IfNotPresent
    imagePullSecrets: []
    env: []
    resources: {}
    driverManager:
      image: k8s-driver-manager
      repository: nvcr.io/nvidia/cloud-native
      version: v0.4.2
      imagePullPolicy: IfNotPresent
      env:
        - name: ENABLE_AUTO_DRAIN
          value: "false"

  sandboxDevicePlugin:
    enabled: true
    repository: nvcr.io/nvidia
    image: kubevirt-gpu-device-plugin
    version: v1.2.1
    imagePullPolicy: IfNotPresent
    imagePullSecrets: []
    args: []
    env: []
    resources: {}

  node-feature-discovery:
    worker:
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Equal"
        effect: "NoSchedule"
      - key: "kind"
        operator: "Equal"
        value: "inference"
        effect: "NoSchedule"

      config:
        sources:
          pci:
            deviceClassWhitelist:
            - "02"
            - "0200"
            - "0207"
            - "0300"
            - "0302"
            deviceLabelFields:
            - vendor

    master:
      extraLabelNs:
        - nvidia.com
      serviceAccount:
        name: node-feature-discovery

## Metrics Server Configuration
metrics-server:
  tolerations:
    - key: kind
      operator: "Equal"
      value: "library"
      effect: "NoSchedule"
      
  metrics:
    enabled: true
  
  serviceMonitor:
    enabled: true

## Prometheus Adapter Configuration
prometheus-adapter:
  tolerations:
    - key: kind
      operator: "Equal"
      value: "library"
      effect: "NoSchedule"
  rules:
    custom:
      - seriesQuery: 'istio_request_duration_milliseconds_bucket{reporter="destination",destination_workload!="", destination_workload_namespace!=""}'
        resources:
            overrides:
              destination_workload_namespace: { resource: "namespace" }
              destination_workload: { resource: "deployment" }
        name:
          matches: "istio_(.*)_bucket"
          as: "${1}"
        metricsQuery: (histogram_quantile(0.90, sum(irate(<<.Series>>{<<.LabelMatchers>>}[1m])) by (le, <<.GroupBy>>)) / 1000)

## Prometheus Configuration
prometheus:
  prometheusSpec:
    logFormat: json
    tolerations:
      - key: kind
        operator: "Equal"
        value: "library"
        effect: "NoSchedule"
    routePrefix: /
    storageSpec:
      volumeClaimTemplate:
        spec:
          persistentVolumeReclaimPolicy: "Delete"
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 5Gi
    additionalScrapeConfigs:
      - job_name: "istiod"
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - istio-system
        relabel_configs:
          - source_labels:
              [
                __meta_kubernetes_service_name,
                __meta_kubernetes_endpoint_port_name,
              ]
            action: keep
            regex: istiod;http-monitoring
      - job_name: "envoy-stats"
        metrics_path: /stats/prometheus
        kubernetes_sd_configs:
          - role: pod
        # relabel_config 설정 https://grafana.com/docs/grafana-cloud/metrics-control-usage/control-prometheus-metrics-usage/usage-reduction/?src=grafana&mdm=rss
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_container_port_name]
            action: keep # 일치하는 대상 유지, 나머지 삭제
            regex: ".*-envoy-prom"
          - source_labels:
              [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace # 일치하는 label 을 replacement에 지정된 새 label 로 변경
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:15090
            target_label: __address__
          - action: labeldrop
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: pod_name
        # kubernetes API 스크랩
      - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        job_name: kubernetes-apiservers
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - action: keep
            regex: default;kubernetes;https
            source_labels:
              - __meta_kubernetes_namespace
              - __meta_kubernetes_service_name
              - __meta_kubernetes_endpoint_port_name
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        #
        # 새로 추가
        #
      - honor_labels: true
        job_name: prometheus-pushgateway
        kubernetes_sd_configs:
          - role: service
        relabel_configs:
          - action: keep
            regex: pushgateway
            source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_probe
      - honor_labels: true
        job_name: kubernetes-services
        kubernetes_sd_configs:
          - role: service
        metrics_path: /probe
        params:
          module:
            - http_2xx
        relabel_configs:
          - action: keep
            regex: true
            source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_probe
          - source_labels:
              - __address__
            target_label: __param_target
          - replacement: blackbox
            target_label: __address__
          - source_labels:
              - __param_target
            target_label: instance
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels:
              - __meta_kubernetes_namespace
            target_label: namespace
          - source_labels:
              - __meta_kubernetes_service_name
            target_label: service
      - honor_labels: true
        job_name: kubernetes-pods
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - action: keep
            regex: true
            source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scrape
          - action: drop
            regex: true
            source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
          - action: replace
            regex: (https?)
            source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scheme
            target_label: __scheme__
          - action: replace
            regex: (.+)
            source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_path
            target_label: __metrics_path__
          - action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            source_labels:
              - __address__
              - __meta_kubernetes_pod_annotation_prometheus_io_port
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
            replacement: __param_$1
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - action: replace
            source_labels:
              - __meta_kubernetes_namespace
            target_label: namespace
          - action: replace
            source_labels:
              - __meta_kubernetes_pod_name
            target_label: pod
          - action: drop
            regex: Pending|Succeeded|Failed|Completed
            source_labels:
              - __meta_kubernetes_pod_phase
      - honor_labels: true
        job_name: kubernetes-pods-slow
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - action: keep
            regex: true
            source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
          - action: replace
            regex: (https?)
            source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scheme
            target_label: __scheme__
          - action: replace
            regex: (.+)
            source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_path
            target_label: __metrics_path__
          - action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            source_labels:
              - __address__
              - __meta_kubernetes_pod_annotation_prometheus_io_port
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
            replacement: __param_$1
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - action: replace
            source_labels:
              - __meta_kubernetes_namespace
            target_label: namespace
          - action: replace
            source_labels:
              - __meta_kubernetes_pod_name
            target_label: pod
          - action: drop
            regex: Pending|Succeeded|Failed|Completed
            source_labels:
              - __meta_kubernetes_pod_phase
        scrape_interval: 5m
        scrape_timeout: 30s
      - honor_labels: true
        job_name: kubernetes-service-endpoints
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - action: keep
            regex: true
            source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_scrape
          - action: drop
            regex: true
            source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_scrape_slow
          - action: replace
            regex: (https?)
            source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_scheme
            target_label: __scheme__
          - action: replace
            regex: (.+)
            source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_path
            target_label: __metrics_path__
          - action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            source_labels:
              - __address__
              - __meta_kubernetes_service_annotation_prometheus_io_port
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
            replacement: __param_$1
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - action: replace
            source_labels:
              - __meta_kubernetes_namespace
            target_label: namespace
          - action: replace
            source_labels:
              - __meta_kubernetes_service_name
            target_label: service
          - action: replace
            source_labels:
              - __meta_kubernetes_pod_node_name
            target_label: node
      - honor_labels: true
        job_name: kubernetes-service-endpoints-slow
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - action: keep
            regex: true
            source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_scrape_slow
          - action: replace
            regex: (https?)
            source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_scheme
            target_label: __scheme__
          - action: replace
            regex: (.+)
            source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_path
            target_label: __metrics_path__
          - action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            source_labels:
              - __address__
              - __meta_kubernetes_service_annotation_prometheus_io_port
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
            replacement: __param_$1
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - action: replace
            source_labels:
              - __meta_kubernetes_namespace
            target_label: namespace
          - action: replace
            source_labels:
              - __meta_kubernetes_service_name
            target_label: service
          - action: replace
            source_labels:
              - __meta_kubernetes_pod_node_name
            target_label: node
        scrape_interval: 5m
        scrape_timeout: 30s
      - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        job_name: kubernetes-nodes
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - replacement: kubernetes.default.svc:443
            target_label: __address__
          - regex: (.+)
            replacement: /api/v1/nodes/$1/proxy/metrics
            source_labels:
              - __meta_kubernetes_node_name
            target_label: __metrics_path__
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
      - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        job_name: kubernetes-nodes-cadvisor
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - replacement: kubernetes.default.svc:443
            target_label: __address__
          - regex: (.+)
            replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
            source_labels:
              - __meta_kubernetes_node_name
            target_label: __metrics_path__
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
  service:
    type: ClusterIP
    annotations: {}
  ingress:
    # ingressClassName: alb
    enabled: false
    annotations: {}
    hosts:
      - test-prom.so1s.io
    paths:
      - /
    pathType: Prefix
  thanosIngress:
    enabled: false

alertmanager:
  alertmanagerSpec:
    logFormat: json
    tolerations:
      - key: kind
        operator: "Equal"
        value: "library"
        effect: "NoSchedule"
  # service:
  #   type: LoadBalancer
  #   annotations:
  #     service.beta.kubernetes.io/aws-load-balancer-type: "external"
  #     service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "instance"
  #     service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
  ingress: # 추후에 설정 예정
    # ingressClassName: alb
    enabled: false
    # annotations:
    #   kubernetes.io/ingress.class: alb
    #   alb.ingress.kubernetes.io/target-type: instance
    #   alb.ingress.kubernetes.io/scheme: internet-facing
    #   external-dns.alpha.kubernetes.io/hostname: dashboard.so1s.io

thanosRuler:
  thanosRulerSpec:
    logFormat: json
    tolerations:
      - key: kind
        operator: "Equal"
        value: "library"
        effect: "NoSchedule"
prometheusOperator:
  logFormat: json
  tolerations:
    - key: kind
      operator: "Equal"
      value: "library"
      effect: "NoSchedule"
  admissionWebhooks:
    patch:
      podAnnotations:
       sidecar.istio.io/inject: "false"
      tolerations:
        - key: kind
          operator: "Equal"
          value: "library"
          effect: "NoSchedule"

## Grafana Configuration
grafana:
  podAnnotations:
    sidecar.istio.io/inject: "true"
  tolerations:
    - key: kind
      operator: "Equal"
      value: "library"
      effect: "NoSchedule"
  adminPassword: password1234
  service:
    type: ClusterIP
    annotations: {}
  ingress:
    # ingressClassName: alb
    enabled: false
    annotations: {}
    hosts:
      - test-dashboard.so1s.io
    path: /
  grafana.ini:
    server:
      domain: so1s.io
      root_url: http://test.dashboard.so1s.io/
      serve_from_sub_path: true
    security:
      allow_embedding: true

## prometheus-node-exporter Configuration
prometheus-node-exporter:
  tolerations:
    - key: kind
      operator: "Equal"
      value: "library"
      effect: "NoSchedule"

## kube-state-metrics Configuration
kube-state-metrics:
  tolerations:
    - key: kind
      operator: "Equal"
      value: "library"
      effect: "NoSchedule"
